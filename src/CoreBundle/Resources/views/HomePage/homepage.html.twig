{% extends "CoreBundle::layout.html.twig" %}

{% block stylesheets %}
    {{ parent() }}
    <style>
    #homepage-stories
    {
        word-wrap: break-word;
    }
    /*.story
    {
        border-width:1px;
        border-style:solid;
        border-color:black;
    }*/
    .story
    {
        border-top-width:1px;
        border-top-style:solid;
        border-top-color:blue;
    }
    </style>
{% endblock %}

{% block body %}
	{{ parent() }}
	<br>

	{# 	Formulaire d'ajout de story #}
	<h2> Ajouter une Histoire </h2>

	{{ form_start(storyForm) }}
	{{ form_errors(storyForm) }}
	{{ form_row(storyForm.title) }}
	{{ form_row(storyForm.content) }}

	{{ form_label(storyForm.bougReadAccess) }}
	 <ul id="bougReadAccess-fields-list"
        data-prototype="{{ form_widget(storyForm.bougReadAccess.vars.prototype)|e }}">
    {% for bougReadAccessField in storyForm.bougReadAccess %}
        <li>
            
        </li>
    {% endfor %}
    </ul>
	{{ form_widget(storyForm.bougReadAccess) }}

     <a href="#" id="add-another-bougReadAccess">Add Boug en accès lecture</a>
     {# <a href="#" id="delete-another-bougReadAccess">Delete Boug</a> #}
     <br>

 	{{ form_label(storyForm.bougIsCharacter) }}
  

     <ul id="bougIsCharacter-fields-list"
        data-prototype="{{ form_widget(storyForm.bougIsCharacter.vars.prototype)|e }}">
    {% for bougIsCharacterField in storyForm.bougIsCharacter %}
        <li>
            {{ form_row(storyForm.bougIsCharacter.vars.prototype) }}

        </li>
    {% endfor %}
    </ul>
  {{ form_widget(storyForm.bougIsCharacter) }}
     <a href="#" id="add-another-bougIsCharacter">Add Boug Is Character</a>

	{{ form_end(storyForm) }}

	{# Affichages des stories #}
	<h3> Histoires récentes </h3>
	<div id="homepage-stories">
	</div>


{% endblock %}

{% block rightcol %}
<div id="add-friends-zone" class="row">
	<h3>Ajouter des amis</h3>
	<input id="friends-search-input" type="text" class="form-control" placeholder="Rechercher des amis">
	<div id="friends-to-be-added"></div>
</div>
{% endblock %}


{% block javascripts %}
{{ parent() }}
<script>

    var storyOpinionFormModel = "{{include('CoreBundle::HomePage/Models/storyOpinionFormModel.html.twig') | e('js')}}";
	var storyDisplayModel = "{{include('CoreBundle::HomePage/Models/storyDisplayModel.html.twig') | e('js')}}";
    var homepageStories = JSON.parse("{{ stories | e('js') }}");

    $(document).ready(function() {
    	homepageStories.forEach(function(story)
    	{
            if(story.userOpinion != 'notCharacter')
                storyOpinionForm = storyOpinionFormModel.format(story.id);
            else
                storyOpinionForm = '';
            if(story.charactersOpinions.length != 0)
            {
                storyOpinions = "Les avis des personnages de cette histoire: Vraie : <span class='countTrue'>"+story.charactersOpinions.countTrue+"</span> - Fake : <span class='countFake'>"+story.charactersOpinions.countFake+"</span> - Je ne m'en rappelle plus : <span class='countDontRemember'>"+story.charactersOpinions.countDontRemember+"</span><br><div class='charactersOpinions' story-id='"+story.id+"'>";
                storyOpinions+=giveCharactersOpinionsHTML(story.charactersOpinions.opinions);
                storyOpinions+='</div>';
            }

    		$('#homepage-stories').append(storyDisplayModel.format(story.id, 
                                                                   story.title, 
                                                                   story.owner, 
                                                                   story.content,
                                                                   storyOpinionForm,
                                                                   storyOpinions,
                                                                   story.rating.rating != 0 ? story.rating.rating : 'Aucun vote', 
                                                                   story.rating.ratingsCount
                                                                   ));

            


            userRating = story.userRating.length == 0 ? 0 : story.userRating;
            $('input[name="story-'+story.id+'-rating"][value="'+userRating+'"]').prop('checked', true);
            if(story.userOpinion != 'notCharacter')
            {
                userOpinion = story.userOpinion.length == 0 ? 'noOpinion' : story.userOpinion;
                $('input[name="story-'+story.id+'-opinion"][value="'+userOpinion+'"]').prop('checked', true);
            }
    	});

    	//On va chercher les bougs en BDD lorsque l'utilisateur effectue une recherche
    	$('#add-friends-zone').on('keyup', 'input', function(e){
    		if(e.which != 8)
    		{
    			$('#friends-to-be-added').empty();
    			searchFriendsAjax($(this).val());
    		}
    	})
    	.on('click', 'button.send-friend-request', function()
    	{
    		idBoug = $(this).attr('id-boug');
    		$.ajax({
				url: "{{path('friends_add_friend')}}",
				method:"post",
				data: {idBoug : idBoug}
			})
			.done(function(data)
			{
				divBoug = $('div.boug-to-be-added[id-boug="'+idBoug+'"]')
				divBoug.append('Demande effectuée <span class="glyphicon glyphicon-ok"></span>');
				divBoug.find('button.send-friend-request').remove();
			});
    	})
    	.on('click', 'button.accept-friend-request', function()
    	{
    		acceptFriendRequestAjax($(this).attr('id-boug'));
    	});

        $('#homepage-stories').on('change', 'input.story-rating-rate', function()
        {
            storyId = $(this).closest('div.story').attr('id-story');
            rate = $(this).val();
            rateStoryAjax(storyId, rate);
        })
        .on('change', 'input.story-opinion-choice', function()
        {
            storyId = $(this).closest('div.story').attr('id-story');
            opinion = $(this).val();
            giveOpinionAjax(storyId, opinion);
        });
    });

    String.prototype.replaceAll = function(search, replacement)
    {
        var target = this;
        return target.split(search).join(replacement);
    };
    String.prototype.format = function()
    {
        var formatted = this;
        for( var arg in arguments ) {
            formatted = formatted.replaceAll('{' + arg + '}', arguments[arg]);
        }
        return formatted;
    };

    function rateStoryAjax(storyId, rate)
    {
        $.ajax({
            url: "{{path('story_rate')}}",
            method:"post",
            data: {storyId : storyId, rate : rate}
        })
        .done(function(data)
        {
            newRating = data['newRating'];
            newRatingsCount = data['newRatingsCount'];

            divStory = $('div.story[id-story="'+storyId+'"]');
            divStory.find('.story-rating-mean').empty().append(newRating);
            divStory.find('.story-rating-count').empty().append(newRatingsCount);
        });
    }

    function giveOpinionAjax(storyId, opinion)
    {
        $.ajax({
            url: "{{path('story_give_opinion')}}",
            method:"post",
            data: {storyId : storyId, opinion : opinion}
        })
        .done(function(data)
        {
            newOpinions = JSON.parse(data['newCharactersOpinions']);
            divOpinions = $('div.story[id-story="'+storyId+'"] .opinions');
            // $('div.charactersOpinions[story-id="'+storyId+'"]').empty().append(giveCharactersOpinionsHTML(newOpinions.opinions));

            divOpinions.find('.charactersOpinions').empty().append(giveCharactersOpinionsHTML(newOpinions.opinions));
            divOpinions.find('.countTrue').empty().append(newOpinions.countTrue);
            divOpinions.find('.countFake').empty().append(newOpinions.countFake);
            divOpinions.find('.countDontRemember').empty().append(newOpinions.countDontRemember);

            
            // newRating = data['newRating'];
            // newRatingsCount = data['newRatingsCount'];

            // divStory = $('div.story[id-story="'+storyId+'"]');
            // divStory.find('.story-rating-mean').empty().append(newRating);
            // divStory.find('.story-rating-count').empty().append(newRatingsCount);
        });
    }


    //Fonction pour aller chercher des bougs en BDD à partir d'un motif
    function searchFriendsAjax(nameSearched)
    {
        $.ajax({
            url: "{{path('friends_get_boug_list')}}",
            method:"post",
            data: {nameSearched : nameSearched}
        })
        .done(function(data)
        {
            nonFriendBougs = JSON.parse(data['nonFriendBougs']);
            friendsRequestedByBoug = JSON.parse(data['friendsRequestedByBoug']);
            bougsRequestingUser = JSON.parse(data['bougsRequestingUser']);
            bougsRequestingUser.forEach(function(item)
            {
                $('#friends-to-be-added').append("<div class='boug-requesting-user' id-boug="+item["id"]+">"+item["username"]+" <button class='accept-friend-request' id-boug="+item["id"]+">Accepter la demande</button></div>");
            });
            friendsRequestedByBoug.forEach(function(item)
            {
                $('#friends-to-be-added').append("<div class='friend-requested-byrboug' id-boug="+item["id"]+">"+item["username"]+" Demande envoyée</div>");
            });
            nonFriendBougs.forEach(function(item)
            {
                $('#friends-to-be-added').append("<div class='boug-to-be-added' id-boug="+item["id"]+">"+item["username"]+" <button class='send-friend-request' id-boug="+item["id"]+">Ajouter</button></div>");
            });
        });
    }

    function giveCharactersOpinionsHTML(charactersOpinions)
    {
        var html = '';
        charactersOpinions.forEach(function(opinion)
        {
            if(opinion.opinion.length != 0 && opinion.username != '{{ user.username }}')
            {
                switch(opinion.opinion)
                {
                    case 'true':
                        op = 'Vraie';
                        break;
                    case 'fake':
                        op = 'Fake';
                        break;
                    case 'dontremember':
                        op = 'Ne s\'en souvient plus';
                        break;
                    default :
                        op = '';
                }
                html+= opinion.username+" : "+op+"<br>"; 
            }
        });
        return html;
    }

</script>





<script type="text/javascript">
    // keep track of how many bougReadAccess fields have been rendered
    var bougReadAccessCount = '{{ storyForm.bougReadAccess|length }}';

    jQuery(document).ready(function() {
        jQuery('#add-another-bougReadAccess').click(function(e) {
            e.preventDefault();

            var bougReadAccessList = jQuery('#bougReadAccess-fields-list');

            // grab the prototype template
            var newWidget = bougReadAccessList.attr('data-prototype');
            // replace the "__name__" used in the id and name of the prototype
            // with a number that's unique to your bougReadAccess
            // end name attribute looks like name="contact[bougReadAccess][2]"
            newWidget = newWidget.replace(/__name__/g, bougReadAccessCount);
            bougReadAccessCount++;

            // create a new list element and add it to the list
            var newLi = jQuery('<li></li>').html(newWidget);
            newLi.appendTo(bougReadAccessList);
        });  

    });

    var bougIsCharacterCount = '{{ storyForm.bougIsCharacter|length }}';

    jQuery(document).ready(function() {
        jQuery('#add-another-bougIsCharacter').click(function(e) {
            e.preventDefault();

            var bougIsCharacterList = jQuery('#bougIsCharacter-fields-list');

            // grab the prototype template
            var newWidget = bougIsCharacterList.attr('data-prototype');
            // replace the "__name__" used in the id and name of the prototype
            // with a number that's unique to your bougIsCharacter
            // end name attribute looks like name="contact[bougIsCharacter][2]"
            newWidget = newWidget.replace(/__name__/g, bougIsCharacterCount);
            bougIsCharacterCount++;

            // create a new list element and add it to the list
            var newLi = jQuery('<li></li>').html(newWidget);
            newLi.appendTo(bougIsCharacterList);
        });
    }); 

        // jQuery('#delete-another-bougReadAccess').click(function(e) {
        //     e.preventDefault();

        //     var bougReadAccessList = jQuery('#bougReadAccess-fields-list');

        //     // grab the prototype template
        //     var newWidget = bougReadAccessList.attr('data-prototype');
        //     // replace the "__name__" used in the id and name of the prototype
        //     // with a number that's unique to your bougReadAccess
        //     // end name attribute looks like name="contact[bougReadAccess][2]"
        //     newWidget = newWidget.replace(/__name__/g, bougReadAccessCount);
        //     bougReadAccessCount++;

        //     // create a new list element and add it to the list
        //     var newLi = jQuery('<li></li>').html(newWidget);
        //     newLi.appendTo(bougReadAccessList);
        // });

</script>

{% endblock %}
